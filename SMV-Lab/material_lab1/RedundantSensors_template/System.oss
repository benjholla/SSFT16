@requires discrete-time
-----------------------------------------------------------------------------
-- REDUNDANT SENSORS MODEL --------------------------------------------------
-----------------------------------------------------------------------------
-- This model represents an architecture to handle a pair of redundant sensors.

-- The only input of the system is ‘reading’ the value from the environment
-- The sensors receive the 'reading' as input and introduce a bounded error
-- The monitors are two variance monitors and a generic one.

-- The generic monitor compares the two sensor current outcomes
-- to determine their consistency on the base of the maximum
-- sensor error assumption.
-- It implements the failure detection feature.

-- For variance monitor it is intended a monitor that seeks for a failure
-- basing on the assumption of a bounded variance for the input of the system.
-- Thus these monitors compare the current value from a particular
-- sensor to the last value of the system to determine wether its
-- outcome is reliable or not valid.
-- They implements the failure isolation feature.

-- The selector relies on the outcomes of the monitors and decides wether
-- to give as output of the system, the first or the second sensor,
-- their average or the last value sent in output.

-----------------------------------------------------------------------------
-----------------------------------------------------------------------------

-- the parameters.h file:
-- it contais the used parameters for the port ranges,
-- for the maximum sensor error and maximum variance,
#include "parameters.h"
-- in the macros.h file:
-- the function abs_diff(a,b) for absolute difference
#include "macros.h"


-- top level component
COMPONENT RedundantSensors system

 INTERFACE
  -- From Environment
  -- the physical input quantity that should be measured by sensors
  INPUT PORT reading: value_domain;

  -- To Environment
  -- the output port of the system
  OUTPUT PORT out: value_domain;

 REFINEMENT

  -- Define subcomponents and their connection
  SUB sensor1: Sensor;
  SUB sensor2: Sensor;
  SUB voter: Voter;

  -- ENVIRONMENT TO SENSOR1
  CONNECTION sensor1.In := reading;

  -- ENVIRONMENT TO SENSOR2
  CONNECTION sensor2.In := reading;

  -- SENSOR1 TO VOTER
  CONNECTION voter.sensor1 := sensor1.out;

  -- SENSOR1 TO VOTER
  CONNECTION voter.sensor2 := sensor2.out;

  -- VOTER TO ENVIRONMENT
  CONNECTION out := voter.out;

----------------------------------------------------------------------
----------------------------------------------------------------------

COMPONENT Voter

 INTERFACE
  -- << COMPLETE THIS >>

 REFINEMENT
 -- << COMPLETE THIS >>

----------------------------------------------------------------------
----------------------------------------------------------------------

COMPONENT Sensor

 INTERFACE
  -- << COMPLETE THIS >>

 REFINEMENT
 -- << COMPLETE THIS >>

----------------------------------------------------------------------
----------------------------------------------------------------------

COMPONENT VarMonitor

 INTERFACE
  -- << COMPLETE THIS >>

 REFINEMENT
 -- << COMPLETE THIS >>

----------------------------------------------------------------------
----------------------------------------------------------------------

COMPONENT  GenMonitor

 INTERFACE
  -- << COMPLETE THIS >>

 REFINEMENT
 -- << COMPLETE THIS >>

----------------------------------------------------------------------
----------------------------------------------------------------------

COMPONENT Selector

 INTERFACE
  -- << COMPLETE THIS >>

 REFINEMENT
 -- << COMPLETE THIS >>
