(binary_tree)
(obt
 (ordered?_TCC1 0
  (ordered?_TCC1-1 nil 3672949090 ("" (termination-tcc) nil nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (size const-decl "nat" obt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (reduce_nat adt-def-decl "[binary_tree -> nat]" binary_tree_adt
     nil))
   nil))
 (ordered?_TCC2 0
  (ordered?_TCC2-1 nil 3672949090 ("" (termination-tcc) nil nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (size const-decl "nat" obt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (reduce_nat adt-def-decl "[binary_tree -> nat]" binary_tree_adt
     nil))
   nil))
 (insert_TCC1 0
  (insert_TCC1-1 nil 3672949090 ("" (termination-tcc) nil nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (size const-decl "nat" obt nil)
    (reduce_nat adt-def-decl "[binary_tree -> nat]" binary_tree_adt
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (insert_TCC2 0
  (insert_TCC2-1 nil 3672949090 ("" (termination-tcc) nil nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (size const-decl "nat" obt nil)
    (reduce_nat adt-def-decl "[binary_tree -> nat]" binary_tree_adt
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (ordered?_insert_step 0
  (ordered?_insert_step-1 nil 3672949090
   ("" (induct-and-simplify "A") nil nil)
   ((binary_tree type-decl nil binary_tree_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" binary_tree_adt nil)
    (insert def-decl "binary_tree[T]" obt nil)
    (T formal-type-decl nil obt nil)
    (binary_tree_induction formula-decl nil binary_tree_adt nil))
   nil))
 (ordered?_insert 0
  (ordered?_insert-1 nil 3672949090
   ("" (induct-and-simplify "A" :rewrites "ordered?_insert_step")
    (("" (rewrite "ordered?_insert_step")
      (("" (typepred "<=") (("" (grind :if-match all) nil nil)) nil))
      nil))
    nil)
   ((<= formal-const-decl "(total_order?[T])" obt nil)
    (total_order? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (reflexive? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil)
    (antisymmetric? const-decl "bool" relations nil)
    (partial_order? const-decl "bool" orders nil)
    (dichotomous? const-decl "bool" orders nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ordered?_insert_step formula-decl nil obt nil)
    (every adt-def-decl "boolean" binary_tree_adt nil)
    (binary_tree type-decl nil binary_tree_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (ordered? def-decl "bool" obt nil)
    (insert def-decl "binary_tree[T]" obt nil)
    (T formal-type-decl nil obt nil)
    (binary_tree_induction formula-decl nil binary_tree_adt nil))
   nil))
 (search_insert 0
  (search_insert-1 nil 3672949090
   ("" (induct-and-simplify "A") nil nil)
   ((binary_tree type-decl nil binary_tree_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (search def-decl "bool" obt nil)
    (insert def-decl "binary_tree[T]" obt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (T formal-type-decl nil obt nil)
    (binary_tree_induction formula-decl nil binary_tree_adt nil))
   nil)))
(obt_eval
 (insert_list_TCC1 0
  (insert_list_TCC1-1 nil 3672949091
   ("" (induct "ll")
    (("1" (expand "ordered?") (("1" (propax) nil nil)) nil)
     ("2" (skeep)
      (("2" (expand "ordered?" +) (("2" (propax) nil nil)) nil)) nil))
    nil)
   ((list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (leaf adt-constructor-decl "(leaf?)" binary_tree_adt nil)
    (leaf? adt-recognizer-decl "[binary_tree -> boolean]"
     binary_tree_adt nil)
    (ordered? def-decl "bool" obt nil) (<= const-decl "bool" reals nil)
    (restrict const-decl "R" restrict nil)
    (every adt-def-decl "boolean" binary_tree_adt nil)
    (binary_tree type-decl nil binary_tree_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (total_order_restrict application-judgement "(total_order?[S])"
     restrict_order_props nil))
   nil))
 (insert_list_TCC2 0
  (insert_list_TCC2-1 nil 3672949091 ("" (termination-tcc) nil nil)
   ((length def-decl "nat" list_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (insert_list_TCC3 0
  (insert_list_TCC3-1 nil 3672949091
   ("" (induct-and-simplify "ll" :rewrites "ordered?_insert") nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (ordered?_insert formula-decl nil obt nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (insert def-decl "binary_tree[T]" obt nil)
    (ordered? def-decl "bool" obt nil) (<= const-decl "bool" reals nil)
    (restrict const-decl "R" restrict nil)
    (every adt-def-decl "boolean" binary_tree_adt nil)
    (binary_tree type-decl nil binary_tree_adt nil)
    (list type-decl nil list_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (total_order_restrict application-judgement "(total_order?[S])"
     restrict_order_props nil))
   nil))
 (test 0
       (test-1 nil 3672958335 ("" (assert) nil nil)
        ((minus_odd_is_odd application-judgement "odd_int" integers
          nil))
        shostak)))

