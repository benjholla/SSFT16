(two_way_sort
 (sorted?_TCC1 0
  (sorted?_TCC1-1 nil 3529760224 ("" (subtype-tcc) nil nil) nil nil))
 (perm?_TCC1 0
  (perm?_TCC1-1 nil 3529760224 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (barray type-eq-decl nil two_way_sort nil)
    (bijective? const-decl "bool" functions nil))
   nil))
 (swap_TCC1 0
  (swap_TCC1-1 nil 3529760224
   ("" (grind :if-match nil)
    ((""
      (inst +
       "(LAMBDA (m: below(a!1`length)): IF m = i!1 THEN j!1 ELSIF m = j!1 THEN i!1 ELSE m ENDIF)")
      (("1" (grind) nil nil)
       ("2" (split)
        (("1" (grind) nil nil)
         ("2" (grind :if-match nil)
          (("2"
            (inst +
             "IF y!1 = j!1 THEN i!1 ELSIF y!1 = i!1 THEN j!1 ELSE y!1 ENDIF")
            (("2" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((j!1 skolem-const-decl "below(a!1`length)" two_way_sort nil)
    (i!1 skolem-const-decl "below(a!1`length)" two_way_sort nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (a!1 skolem-const-decl "barray" two_way_sort nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (surjective? const-decl "bool" functions nil)
    (injective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" functions nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (barray type-eq-decl nil two_way_sort nil)
    (perm? const-decl "bool" two_way_sort nil))
   nil))
 (two_way_sort_rec_TCC1 0
  (two_way_sort_rec_TCC1-1 nil 3529760224 ("" (subtype-tcc) nil nil)
   nil nil))
 (two_way_sort_rec_TCC2 0
  (two_way_sort_rec_TCC2-1 nil 3529760224 ("" (subtype-tcc) nil nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sorted_out? const-decl "bool" two_way_sort nil)
    (subrange type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (barray type-eq-decl nil two_way_sort nil)
    (below type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (two_way_sort_rec_TCC3 0
  (two_way_sort_rec_TCC3-1 nil 3529760224
   ("" (grind :if-match nil)
    (("1" (inst - "k!1") (("1" (ground) nil nil)) nil)
     ("2" (inst - "k!1") (("2" (ground) nil nil)) nil))
    nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (barray type-eq-decl nil two_way_sort nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (subrange type-eq-decl nil integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (sorted_out? const-decl "bool" two_way_sort nil))
   nil))
 (two_way_sort_rec_TCC4 0
  (two_way_sort_rec_TCC4-1 nil 3529760224
   ("" (termination-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (two_way_sort_rec_TCC5 0
  (two_way_sort_rec_TCC5-1 nil 3529760224 ("" (subtype-tcc) nil nil)
   nil nil))
 (two_way_sort_rec_TCC6 0
  (two_way_sort_rec_TCC6-1 nil 3529760224
   ("" (grind :if-match nil)
    (("1" (inst - "k!1") (("1" (ground) nil nil)) nil)
     ("2" (inst - "k!1") (("2" (ground) nil nil)) nil))
    nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (barray type-eq-decl nil two_way_sort nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (subrange type-eq-decl nil integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (sorted_out? const-decl "bool" two_way_sort nil))
   nil))
 (two_way_sort_rec_TCC7 0
  (two_way_sort_rec_TCC7-1 nil 3529760224
   ("" (termination-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (two_way_sort_rec_TCC8 0
  (two_way_sort_rec_TCC8-1 nil 3529760224
   ("" (skosimp* :preds? t)
    (("" (typepred "swap(a!1, i!1, j!1)")
      (("" (assert)
        (("" (expand "sorted?")
          (("" (ground)
            (("" (inst + "j!1")
              (("1" (hide -1)
                (("1" (expand "swap")
                  (("1" (expand "sorted_out?")
                    (("1" (grind :if-match nil)
                      (("1" (inst - "k!1") (("1" (ground) nil nil))
                        nil)
                       ("2" (inst - "k!1") (("2" (ground) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (grind) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((swap const-decl "(perm?(a))" two_way_sort nil)
    (perm? const-decl "bool" two_way_sort nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sorted? const-decl "bool" two_way_sort nil)
    (a!1 skolem-const-decl "barray" two_way_sort nil)
    (i!1 skolem-const-decl "below(a!1`length)" two_way_sort nil)
    (j!1 skolem-const-decl
     "{j: subrange(i!1, a!1`length - 1) | sorted_out?(a!1, i!1, j)}"
     two_way_sort nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (barray type-eq-decl nil two_way_sort nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (subrange type-eq-decl nil integers nil)
    (sorted_out? const-decl "bool" two_way_sort nil))
   nil))
 (two_way_sort_rec_TCC9 0
  (two_way_sort_rec_TCC9-1 nil 3529760224 ("" (subtype-tcc) nil nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (swap const-decl "(perm?(a))" two_way_sort nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sorted_out? const-decl "bool" two_way_sort nil)
    (subrange type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (barray type-eq-decl nil two_way_sort nil)
    (below type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (two_way_sort_rec_TCC10 0
  (two_way_sort_rec_TCC10-1 nil 3529760224
   ("" (skosimp* :preds? t)
    (("" (ground)
      (("1" (grind) nil nil)
       ("2" (expand "swap")
        (("2" (expand "sorted_out?")
          (("2" (skosimp*)
            (("2" (ground)
              (("1" (inst - "k!1") (("1" (ground) nil nil)) nil)
               ("2" (inst - "k!1") (("2" (ground) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (swap const-decl "(perm?(a))" two_way_sort nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (barray type-eq-decl nil two_way_sort nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (subrange type-eq-decl nil integers nil)
    (sorted_out? const-decl "bool" two_way_sort nil))
   nil))
 (two_way_sort_rec_TCC11 0
  (two_way_sort_rec_TCC11-1 nil 3529760224
   ("" (termination-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (two_way_sort_rec_TCC12 0
  (two_way_sort_rec_TCC12-1 nil 3529760224
   ("" (skosimp* :preds? t)
    (("" (typepred "v!1(swap(a!1, i!1, j!1), i!1 + 1, j!1 - 1)")
      (("1"
        (name-replace "vv"
         "v!1(swap(a!1, i!1, j!1), i!1 + 1, j!1 - 1)")
        (("1" (assert)
          (("1" (expand "perm?")
            (("1" (ground)
              (("1" (grind) nil nil)
               ("2" (skosimp* :preds? t)
                (("2" (typepred "swap(a!1, i!1, j!1)")
                  (("2" (expand "perm?")
                    (("2" (skosimp* :preds? t)
                      (("2" (inst + "p!2 o p!1")
                        (("1" (skosimp*)
                          (("1" (inst -7 "k!1")
                            (("1" (inst - "p!1(k!1)")
                              (("1"
                                (ground)
                                (("1"
                                  (expand "o")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil)
                               ("2" (grind) nil nil))
                              nil))
                            nil))
                          nil)
                         ("2" (split)
                          (("1" (grind) nil nil)
                           ("2" (replace -2 :dir RL :actuals? t)
                            (("2"
                              (use "function_props[below(a!1`length), below(a!1`length), below(a!1`length)].composition_bijective")
                              (("2"
                                (grind
                                 :exclude
                                 ("bijective?" "sorted?" "swap"))
                                nil
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3"
                          (grind :exclude
                           ("bijective?" "sorted?" "swap"))
                          nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2"
          (grind :exclude
           ("bijective?" "sorted?" "perm?" "sorted_out?"))
          nil nil))
        nil)
       ("2" (ground)
        (("1"
          (grind :exclude
           ("bijective?" "sorted?" "perm?" "sorted_out?"))
          nil nil)
         ("2"
          (grind :if-match nil :exclude
           ("bijective?" "sorted?" "perm?"))
          (("1" (inst - "k!1") (("1" (ground) nil nil)) nil)
           ("2" (inst - "k!1") (("2" (ground) nil nil)) nil))
          nil))
        nil)
       ("3"
        (grind :exclude ("bijective?" "sorted?" "perm?" "sorted_out?"))
        nil nil))
      nil))
    nil)
   ((+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (swap const-decl "(perm?(a))" two_way_sort nil)
    (perm? const-decl "bool" two_way_sort nil)
    (sorted? const-decl "bool" two_way_sort nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (composition_bijective judgement-tcc nil function_props nil)
    (k!1 skolem-const-decl "below(a!1`length)" two_way_sort nil)
    (injective? const-decl "bool" functions nil)
    (surjective? const-decl "bool" functions nil)
    (p!2 skolem-const-decl
     "(bijective?[below(a!1`length), below(a!1`length)])" two_way_sort
     nil)
    (O const-decl "T3" function_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (p!1 skolem-const-decl "(bijective?
     [below(swap(a!1, i!1, j!1)`length), below(swap(a!1, i!1, j!1)`length)])"
     two_way_sort nil)
    (j!1 skolem-const-decl
     "{j: subrange(i!1, a!1`length - 1) | sorted_out?(a!1, i!1, j)}"
     two_way_sort nil)
    (i!1 skolem-const-decl "below(a!1`length)" two_way_sort nil)
    (a!1 skolem-const-decl "barray" two_way_sort nil)
    (bijective? const-decl "bool" functions nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (barray type-eq-decl nil two_way_sort nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (subrange type-eq-decl nil integers nil)
    (sorted_out? const-decl "bool" two_way_sort nil))
   nil))
 (two_way_sort_rec_TCC13 0
  (two_way_sort_rec_TCC13-1 nil 3529760224
   ("" (skosimp* :preds? t)
    (("" (expand "sorted?")
      (("" (split)
        (("1" (inst + "i!1") (("1" (assert) nil nil)) nil)
         ("2" (expand "perm?")
          (("2" (inst + "I") (("2" (grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((sorted? const-decl "bool" two_way_sort nil)
    (perm? const-decl "bool" two_way_sort nil)
    (bijective? const-decl "bool" functions nil)
    (I const-decl "(bijective?[T, T])" identity nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (barray type-eq-decl nil two_way_sort nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (subrange type-eq-decl nil integers nil)
    (sorted_out? const-decl "bool" two_way_sort nil))
   nil))
 (two_way_sort_TCC1 0
  (two_way_sort_TCC1-1 nil 3529760224
   ("" (grind) (("" (inst + "I") (("" (grind) nil nil)) nil)) nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (barray type-eq-decl nil two_way_sort nil)
    (bijective? const-decl "bool" functions nil)
    (I const-decl "(bijective?[T, T])" identity nil)
    (perm? const-decl "bool" two_way_sort nil)
    (sorted? const-decl "bool" two_way_sort nil)
    (sorted_out? const-decl "bool" two_way_sort nil))
   nil))
 (two_way_sort_TCC2 0
  (two_way_sort_TCC2-1 nil 3529760224 ("" (subtype-tcc) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (two_way_sort_TCC3 0
  (two_way_sort_TCC3-1 nil 3529762859 ("" (subtype-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (sorted_out? const-decl "bool" two_way_sort nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil)))

