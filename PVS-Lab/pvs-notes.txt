# download pvs
./bin/relocate

# run pvs
./pvs

# note M-x means "meta" + x keys, ctrl-x k kills the buffer

# change pvs context to directory where arithmetic and proposition files are
M-x cc then edit path and press enter

# open proposition file
ctrl-c ctrl-f propositions.pvs

# run type check
M-x tc

# run prover (prover runs on the equation that was currently selected)
M-x pr

# Prover commands
Rule? (flatten)

# split the first flattened result
Rule? (split -1)

# shows the siblings
M-x sib

# split the last result
Rule? (split -1)

# show/edit the proof text hierarchy
M-x edit-proof

# show the proof hierarchy
M-x show-proof

# step through the proof 
M-x x-step-proof

# quit prover
Rule? q

# simplify using BDDs
Rule? (bddsimp)

# show strategy (then type a strategy such as bddsimp to show the strategy)
ctrl-c ctrl-h s

# convert equals in the if and only ifs
Rule? (iff)

# skolemize and keep (keep means don't rename variables)
Rule? (skeep)

# replace with y
(inst - "y")

# hail mary just try a bunch of stuff...
(grind)

# hail mary just try a bunch of stuff...
# and show your work
(grind$)

################## session 2 ##################

# Recap

# change context
M-x cc

# write file
M-x ctrl-c ctrl-f

# type check
# M-x tc

# prover
M-x pr

# prover with steps
M-x x-step-proof

# exit emacs
ctrl-x ctrl-c

# return to previous buffer
ctrl-x b

# interrupt emacs
ctrl-g

# interrupt proofs
ctrl-c ctrl-c

# type reload if you crash to lisp
(restore)

# flattens proposition
Rule? (flatten)

# splits proposition n
Rule? (split n)

# propositional simplification
Rule? (prop)

# simplifies using bdd library (will give a result, but expensive, last resort)
Rule? (bddsimp)

# skolemize and keep (don't rename variables)
Rule? (skeep)

Rule? (inst n "a")
Rule? (inst? n)
Rule? (inst-cp n) / ()
Rule? (induct "x")
Rule? (induct-)
Rule? (assert)
Rule? (grind)

# list rules
M-x help

######### New stuff

# rewrites the current proposition using another theory
(auto-rewrite-theory "real_props")

# use yices to give a counter example
(yices)

# show the proof verifications
M-x show-tccs

# lift a block of ifs out
(lift-if)

(apply-extensionality)

# undo n steps
(undo 3)

# flatten, split and repeat
(ground)

# create a new file
M-x nf

# show tccs
M-x tccs

# type check and prove
M-x tcp
